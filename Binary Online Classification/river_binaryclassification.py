# -*- coding: utf-8 -*-
"""river_binaryclassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HST3mbttbh1vXkA-aAbuPe_2hqBO-fEd
"""

# Import dataset
from river import datasets
from pprint import pprint

dataset = datasets.Phishing()
dataset

# First data sample
for x, y in dataset:
    pass

x, y = next(iter(dataset))
pprint(x)
pprint(y)

# Define ML model
from river import linear_model

model = linear_model.LogisticRegression()
model.predict_proba_one(x)

# Learn from one sample
model = model.learn_one(x,y)
model.predict_proba_one(x)

model.predict_one(x)

# Training
from river import metrics

model = linear_model.LogisticRegression()

metric = metrics.ROCAUC()

for x, y in dataset:
    y_pred = model.predict_proba_one(x)
    model.learn_one(x, y)
    metric.update(y, y_pred)
    
metric

# Evaluate the model
from river import evaluate

model = linear_model.LogisticRegression()
metric = metrics.ROCAUC()

evaluate.progressive_val_score(dataset, model, metric)

# A common way to improve the performance of a logistic regression is to scale the data
from river import compose
from river import preprocessing

model = compose.Pipeline(
    preprocessing.StandardScaler(),
    linear_model.LogisticRegression()
)
model # Visualize the pipeline

# Result after scaling the data
metric = metrics.ROCAUC()
evaluate.progressive_val_score(dataset, model, metric)